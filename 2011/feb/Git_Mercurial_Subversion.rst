======================================
Git vs. Mercurial vs. Subversion
======================================

两类版本控制工具简单说明
============================


这三种版本控制工具，我都有用过，目前项目中使用最多的是Mercurial,
而一些自己的项目也分布在github(git)或者bitbucket(mercurial)上。

比较而言，Git和Mercurial是一类版本控制工具，即分布式的版本控制工具，
而Subversion是集中式的版本控制工具，如果用一句话来概括二类的不同，则
为： **使用分布式版本控制工具检出的版本，包含完整的版本、历史等与代码
相关的信息，而集中式的版本控制工具检出的版本，通常只包含最新的一个版本
的代码** ， 所以分布式版本控制工具能够极大地减少网络通信（如与服务器），
大大地提高效率。一个简单的例子例如要查看一个文件的log，用svn时就得和集中
的服务器通信来获得，获取的延时取决于网络通信等因素，而git或者mercurial则
只是一个本地的操作。

下面简单对比了下二类版本控制工具的优势：

+------------+--------------------------------+--------------------------------------+
|            |分布式版本控制工具              | 集中式版本控制工具                   |
+============+================================+======================================+
| 优点       | 1. 减少网络通信                | 1. 单次检出的成本低                  |
|            | 2. 去中心化，提高可靠性        | 2. 较适合二进制文件（相比）          |
|            | 3. 更利于分布式协作            | 3. 掌握的人更多                      |
|            | 4. 生产率(productivity)相对较高| 4. 命令流程简单                      |
|            |                                | 5. 相关配套软件成熟（如IDE集成）     |
+------------+--------------------------------+--------------------------------------+
| 缺点       | 1. 首次检出代码时代价高        | 1. 大量的网络通信                    |
|            | 2. 不适合二进制文件            | 2. 可靠性较低（信赖于中心结点）      |
|            | 3. 掌握的人较少                | 3. 不太利于分布式开发                |
|            | 4. 命令流程相对复杂            |                                      |
|            | 5. 相关配套软件不成熟          |                                      |
+------------+--------------------------------+--------------------------------------+

三种常用版本控制工具的命令对比
===================================

据说，IT行业跳槽率是很高的一个行业，特别是开发人员，面对一个新的公司、新的同事、新的开发环境、
新的版本控制工具等的机率是很高的，而一个有较高素养的开发人员，应该对于主流的版本控制工具有一定
的了解，特别是对于常用的一些基本操作有能够较熟练的掌握。下面，我就简单总结下不同的操作目标下
三种不同工具的具体操作方式和命令。


+---------------------------+-------------------------+--------------------------+-------------------------------+
|                           |  Subversion             |   Mercurial              |     Git                       |
+===========================+=========================+==========================+===============================+
| 检出新的代码库            | svn co repos_path wc    | hg clone repos_path  wc  |  git clone repos_path  wc     |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 更新已有的代码库          | svn  up                 | hg pull -u               |  git pull                     |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 查看本地的修改            | svn  st                 | hg st                    |  git status                   |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 提交本地的修改            | 1. svn add files        | 1. hg add files          |  1.git add files              |
|                           | 2. svn ci -m "comments" | 2. hg ci -m "comments"   |  2.git commit -m "comments" -a|
|                           |                         | 3. hg push               |  3.git push                   |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 查看log                   | svn log file            | hg log file              |  git log file                 |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 恢复某个文件到某个版本    | svn merge -c -REV file  | hg revert -rREV file     |  git checkout REV file        |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 恢复整个代码库到某个版本  | svn up -rREV            | hg up -rREV              |  git checkout REV             |
+---------------------------+-------------------------+--------------------------+-------------------------------+
| 比较文件                  | svn diff -rREV:REV file | hg diff -rREV:REV file   |  git -rREV:REV file           |
+---------------------------+-------------------------+--------------------------+-------------------------------+


当然上面只是最最基本的使用说明，不过大致已经涵盖了开发人员90%以上的日常操作，诸如branch,tag等应用，
你大体上可以通过"svn/hg/git help"来获得信息。

相关的链接
==============

1. `git magic <http://www-cs-students.stanford.edu/~blynn/gitmagic/>`_
2. `svn book <http://svnbook.red-bean.com/en/1.5/index.html>`_
3. `mercurial guide <http://mercurial.selenic.com/guide/>`_
4. `git tag on SO <http://stackoverflow.com/questions/tagged/git>`_ (相关的对比和分析）
